generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public", "auth"]
}

enum UserRoles {
  USER
  ADMIN
  AUTHOR
  CUSTOMER_SUPPORT
  MARKETTING
  SALES
  FINANCE
  RESEARCH
  PUBLISHERS
  EDITOR
  AGENT

  @@schema("public")
}
model users{
    id                  String              @id @unique @default(uuid()) @db.Uuid
  @@schema("auth")
}

model User {
  id                  String              @id @unique @default(uuid()) @db.Uuid
  full_name           String
  userName            String?
  email               String              @unique
  phone               String?             @unique
  isActive            Boolean             @default(true)
  isMember            Boolean             @default(false)
  image               String?
  likes               Category[]          @relation("likes")
  channelFollowing    Channel[]           @relation("followers")
  group               UserRoles           @default(USER)
  wallets             Wallet[]
  enrolled            Enrolled[]
  courseCompletions   CourseCompletion[]
  chapterComplletions ChapterCompletion[]
  channels            Channel[]
  reads               Read[]
  orders              CourseOrder[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  @@schema("auth")
}

model Channel {
  id         String   @id @unique @default(uuid()) @db.Uuid
  name       String
  createdAt  DateTime @default(now())
  isActive   Boolean  @default(true)
  userId     String   @db.Uuid
  categoryId String   @db.Uuid
  isDefault  Boolean  @default(false)
  category   Category @relation(fields: [categoryId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  courses    Course[]
  followers  User[]   @relation("followers")
  blogs      Blog[]

  @@schema("public")
}

model Course {
  id             String             @id @unique @default(uuid()) @db.Uuid
  title          String
  recommendedFor String
  thumbnail      String?
  price          String
  createdAt      DateTime           @default(now())
  description    String
  durationInDays String
  published      Boolean            @default(false)
  updatedAt      DateTime           @updatedAt
  categoryId     String             @db.Uuid
  channelId      String             @db.Uuid
  channel        Channel            @relation(fields: [channelId], references: [id])
  category       Category           @relation(fields: [categoryId], references: [id])
  orders         CourseOrder[]
  chapters       Chapter[]
  students       Enrolled[]
  certificates   CourseCompletion[]

  @@schema("public")
}

model Chapter {
  id          String              @id @unique @default(uuid()) @db.Uuid
  title       String
  content     String
  courseID    String              @db.Uuid
  course      Course              @relation(fields: [courseID], references: [id], onDelete: Cascade)
  completions ChapterCompletion[]

  @@schema("public")
}

model Category {
  id       String    @id @unique @default(uuid()) @db.Uuid
  name     String
  likes    User[]    @relation("likes")
  courses  Course[]
  channels Channel[]

  @@schema("public")
}

model Wallet {
  id           String        @id @unique @default(uuid()) @db.Uuid
  balance      Int
  points       Int
  PIN          String
  phone        String        @unique
  email        String        @unique
  rate         Float         @default(0.5)
  userID       String        @db.Uuid
  user         User          @relation(fields: [userID], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())

  @@schema("public")
}

model Enrolled {
  id       String   @id @unique @default(uuid()) @db.Uuid
  courseID String   @db.Uuid
  course   Course   @relation(fields: [courseID], references: [id])
  date     DateTime @default(now())
  userID   String   @db.Uuid
  holder   User     @relation(fields: [userID], references: [id])

  @@schema("public")
}

model CourseCompletion {
  id       String   @id @unique @default(uuid()) @db.Uuid
  courseID String   @db.Uuid
  course   Course   @relation(fields: [courseID], references: [id])
  date     DateTime @default(now())
  userID   String   @db.Uuid
  holder   User     @relation(fields: [userID], references: [id])

  @@schema("public")
}

enum TransactionState {
  success
  cancelled
  pending

  @@schema("public")
}

model Transaction {
  id       String   @id @unique @default(uuid()) @db.Uuid
  code     String
  date     DateTime @default(now())
  walletID String   @db.Uuid
  wallet   Wallet   @relation(fields: [walletID], references: [id])

  @@schema("public")
}

model Blog {
  id        String   @id @unique @default(uuid()) @db.Uuid
  title     String
  image     String?
  slug      String
  body      String
  reads     Read[]
  published Boolean  @default(false)
  channelId String   @db.Uuid
  channel   Channel  @relation(fields: [channelId], references: [id])
  createdAt DateTime @default(now())

  @@schema("public")
}

model Read {
  id       String   @id @unique @default(uuid()) @db.Uuid
  blogId   String   @db.Uuid
  blog     Blog     @relation(fields: [blogId], references: [id])
  readerId String   @db.Uuid
  reader   User     @relation(fields: [readerId], references: [id])
  date     DateTime @default(now())

  @@schema("public")
}

model Team {
  id      String     @id @unique @default(uuid()) @db.Uuid
  name    String
  role    String
  members Employee[]
  adminId String     @db.Uuid
  admin   Admin      @relation(fields: [adminId], references: [id])

  @@schema("public")
}

model Employee {
  id        String   @id @unique @default(uuid()) @db.Uuid
  role      String
  salary    Int
  createdAt DateTime @default(now())
  teamId    String   @db.Uuid
  team      Team     @relation(fields: [teamId], references: [id])

  @@schema("public")
}

model Admin {
  id        String   @id @unique @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  email     String   @unique
  phone     String?  @unique
  salary    Int
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  teams     Team[]

  @@schema("public")
}

model ChapterCompletion {
  id        String   @id @unique @default(uuid()) @db.Uuid
  chapterId String   @db.Uuid
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@schema("public")
}

enum OrderStatus {
  pending
  cancelled
  fulfilled

  @@schema("public")
}

model CourseOrder {
  id        String      @id @unique @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    String      @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  dicount   Int         @default(0)
  status    OrderStatus
  price     String
  payed     Boolean     @default(false)
  items     Course[]

  @@schema("public")
}
